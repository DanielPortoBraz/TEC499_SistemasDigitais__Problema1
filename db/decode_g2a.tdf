--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 23.1 cbx_cycloneii 2023:11:29:19:33:06:SC cbx_lpm_add_sub 2023:11:29:19:33:06:SC cbx_lpm_compare 2023:11:29:19:33:06:SC cbx_lpm_decode 2023:11:29:19:33:06:SC cbx_mgl 2023:11:29:19:43:53:SC cbx_nadder 2023:11:29:19:33:06:SC cbx_stratix 2023:11:29:19:33:06:SC cbx_stratixii 2023:11:29:19:33:05:SC  VERSION_END


-- Copyright (C) 2023  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_g2a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1074w[3..0]	: WIRE;
	w_anode1091w[3..0]	: WIRE;
	w_anode1101w[3..0]	: WIRE;
	w_anode1111w[3..0]	: WIRE;
	w_anode1121w[3..0]	: WIRE;
	w_anode1131w[3..0]	: WIRE;
	w_anode1141w[3..0]	: WIRE;
	w_anode1151w[3..0]	: WIRE;
	w_anode1161w[3..0]	: WIRE;
	w_anode1172w[3..0]	: WIRE;
	w_anode1182w[3..0]	: WIRE;
	w_anode1192w[3..0]	: WIRE;
	w_anode1202w[3..0]	: WIRE;
	w_anode1212w[3..0]	: WIRE;
	w_anode1222w[3..0]	: WIRE;
	w_anode1232w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1151w[3..3], w_anode1141w[3..3], w_anode1131w[3..3], w_anode1121w[3..3], w_anode1111w[3..3], w_anode1101w[3..3], w_anode1091w[3..3], w_anode1074w[3..3]);
	eq_wire2w[] = ( w_anode1232w[3..3], w_anode1222w[3..3], w_anode1212w[3..3], w_anode1202w[3..3], w_anode1192w[3..3], w_anode1182w[3..3], w_anode1172w[3..3], w_anode1161w[3..3]);
	w_anode1074w[] = ( (w_anode1074w[2..2] & (! data_wire[2..2])), (w_anode1074w[1..1] & (! data_wire[1..1])), (w_anode1074w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1091w[] = ( (w_anode1091w[2..2] & (! data_wire[2..2])), (w_anode1091w[1..1] & (! data_wire[1..1])), (w_anode1091w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1101w[] = ( (w_anode1101w[2..2] & (! data_wire[2..2])), (w_anode1101w[1..1] & data_wire[1..1]), (w_anode1101w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1111w[] = ( (w_anode1111w[2..2] & (! data_wire[2..2])), (w_anode1111w[1..1] & data_wire[1..1]), (w_anode1111w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1121w[] = ( (w_anode1121w[2..2] & data_wire[2..2]), (w_anode1121w[1..1] & (! data_wire[1..1])), (w_anode1121w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1131w[] = ( (w_anode1131w[2..2] & data_wire[2..2]), (w_anode1131w[1..1] & (! data_wire[1..1])), (w_anode1131w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1141w[] = ( (w_anode1141w[2..2] & data_wire[2..2]), (w_anode1141w[1..1] & data_wire[1..1]), (w_anode1141w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1151w[] = ( (w_anode1151w[2..2] & data_wire[2..2]), (w_anode1151w[1..1] & data_wire[1..1]), (w_anode1151w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1161w[] = ( (w_anode1161w[2..2] & (! data_wire[2..2])), (w_anode1161w[1..1] & (! data_wire[1..1])), (w_anode1161w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1172w[] = ( (w_anode1172w[2..2] & (! data_wire[2..2])), (w_anode1172w[1..1] & (! data_wire[1..1])), (w_anode1172w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1182w[] = ( (w_anode1182w[2..2] & (! data_wire[2..2])), (w_anode1182w[1..1] & data_wire[1..1]), (w_anode1182w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1192w[] = ( (w_anode1192w[2..2] & (! data_wire[2..2])), (w_anode1192w[1..1] & data_wire[1..1]), (w_anode1192w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1202w[] = ( (w_anode1202w[2..2] & data_wire[2..2]), (w_anode1202w[1..1] & (! data_wire[1..1])), (w_anode1202w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1212w[] = ( (w_anode1212w[2..2] & data_wire[2..2]), (w_anode1212w[1..1] & (! data_wire[1..1])), (w_anode1212w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1222w[] = ( (w_anode1222w[2..2] & data_wire[2..2]), (w_anode1222w[1..1] & data_wire[1..1]), (w_anode1222w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1232w[] = ( (w_anode1232w[2..2] & data_wire[2..2]), (w_anode1232w[1..1] & data_wire[1..1]), (w_anode1232w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
