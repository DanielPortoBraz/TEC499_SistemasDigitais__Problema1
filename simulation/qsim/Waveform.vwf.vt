// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/07/2025 23:42:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          memory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] data;
reg [16:0] rdaddress;
reg rden;
reg [16:0] wraddress;
reg wren;
// wires                                               
wire [7:0] q;

// assign statements (if any)                          
memory i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.data(data),
	.q(q),
	.rdaddress(rdaddress),
	.rden(rden),
	.wraddress(wraddress),
	.wren(wren)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 

// rden
initial
begin
	rden = 1'b1;
end 

// wren
initial
begin
	wren = 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 
// rdaddress[ 16 ]
initial
begin
	rdaddress[16] = 1'b0;
end 
// rdaddress[ 15 ]
initial
begin
	rdaddress[15] = 1'b0;
end 
// rdaddress[ 14 ]
initial
begin
	rdaddress[14] = 1'b1;
	rdaddress[14] = #380000 1'b0;
	rdaddress[14] = #100000 1'b1;
	rdaddress[14] = #500000 1'b0;
end 
// rdaddress[ 13 ]
initial
begin
	rdaddress[13] = 1'b0;
end 
// rdaddress[ 12 ]
initial
begin
	rdaddress[12] = 1'b1;
	rdaddress[12] = #380000 1'b0;
	rdaddress[12] = #100000 1'b1;
	rdaddress[12] = #500000 1'b0;
end 
// rdaddress[ 11 ]
initial
begin
	rdaddress[11] = 1'b0;
end 
// rdaddress[ 10 ]
initial
begin
	rdaddress[10] = 1'b0;
end 
// rdaddress[ 9 ]
initial
begin
	rdaddress[9] = 1'b1;
	rdaddress[9] = #380000 1'b0;
	rdaddress[9] = #100000 1'b1;
	rdaddress[9] = #500000 1'b0;
end 
// rdaddress[ 8 ]
initial
begin
	rdaddress[8] = 1'b0;
end 
// rdaddress[ 7 ]
initial
begin
	rdaddress[7] = 1'b1;
	rdaddress[7] = #380000 1'b0;
	rdaddress[7] = #100000 1'b1;
	rdaddress[7] = #500000 1'b0;
end 
// rdaddress[ 6 ]
initial
begin
	rdaddress[6] = 1'b1;
	rdaddress[6] = #380000 1'b0;
	rdaddress[6] = #100000 1'b1;
	rdaddress[6] = #500000 1'b0;
end 
// rdaddress[ 5 ]
initial
begin
	rdaddress[5] = 1'b1;
	rdaddress[5] = #380000 1'b0;
	rdaddress[5] = #100000 1'b1;
	rdaddress[5] = #500000 1'b0;
end 
// rdaddress[ 4 ]
initial
begin
	rdaddress[4] = 1'b1;
	rdaddress[4] = #380000 1'b0;
	rdaddress[4] = #100000 1'b1;
	rdaddress[4] = #500000 1'b0;
end 
// rdaddress[ 3 ]
initial
begin
	rdaddress[3] = 1'b1;
	rdaddress[3] = #380000 1'b0;
	rdaddress[3] = #100000 1'b1;
	rdaddress[3] = #500000 1'b0;
end 
// rdaddress[ 2 ]
initial
begin
	rdaddress[2] = 1'b0;
end 
// rdaddress[ 1 ]
initial
begin
	rdaddress[1] = 1'b0;
end 
// rdaddress[ 0 ]
initial
begin
	rdaddress[0] = 1'b0;
	rdaddress[0] = #480000 1'b1;
	rdaddress[0] = #500000 1'b0;
end 
// wraddress[ 16 ]
initial
begin
	wraddress[16] = 1'b0;
end 
// wraddress[ 15 ]
initial
begin
	wraddress[15] = 1'b0;
end 
// wraddress[ 14 ]
initial
begin
	wraddress[14] = 1'b0;
end 
// wraddress[ 13 ]
initial
begin
	wraddress[13] = 1'b0;
end 
// wraddress[ 12 ]
initial
begin
	wraddress[12] = 1'b0;
end 
// wraddress[ 11 ]
initial
begin
	wraddress[11] = 1'b0;
end 
// wraddress[ 10 ]
initial
begin
	wraddress[10] = 1'b0;
end 
// wraddress[ 9 ]
initial
begin
	wraddress[9] = 1'b0;
end 
// wraddress[ 8 ]
initial
begin
	wraddress[8] = 1'b0;
end 
// wraddress[ 7 ]
initial
begin
	wraddress[7] = 1'b0;
end 
// wraddress[ 6 ]
initial
begin
	wraddress[6] = 1'b0;
end 
// wraddress[ 5 ]
initial
begin
	wraddress[5] = 1'b0;
end 
// wraddress[ 4 ]
initial
begin
	wraddress[4] = 1'b0;
end 
// wraddress[ 3 ]
initial
begin
	wraddress[3] = 1'b0;
end 
// wraddress[ 2 ]
initial
begin
	wraddress[2] = 1'b0;
end 
// wraddress[ 1 ]
initial
begin
	wraddress[1] = 1'b0;
end 
// wraddress[ 0 ]
initial
begin
	wraddress[0] = 1'b0;
end 
endmodule

